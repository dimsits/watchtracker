generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Or your database provider
  url      = env("DATABASE_URL")
}

model User {
  user_id       String     @id @default(uuid())
  username      String
  name          String
  email         String     @unique
  password      String
  role          String    
  watchlists    Watchlist[]
  reviews       Review[]   // Link to reviews by the user
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Movies {
  movie_id      String     @id @default(uuid())
  title         String
  year          String
  genre         String
  director      String
  writer        String
  actors        String
  plot          String
  language      String
  country       String
  awards        String
  poster_url    String
  imdb_rating   Float
  watchlists    Watchlist[]
  reviews       Review[]   // Link to reviews for this movie
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Watchlist {
  watchlist_id  String     @id @default(uuid())
  user_id       String
  movie_id      String
  watched       Boolean    @default(false)
  notes         String?
  user          User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  movie         Movies     @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([user_id, movie_id]) // Compound unique constraint
}

model Review {
  review_id     String     @id @default(uuid())
  user_id       String
  movie_id      String
  rating        Int        // Star rating (1 to 5)
  user          User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  movie         Movies     @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([user_id, movie_id]) // Ensures a user can rate a movie only once
}
